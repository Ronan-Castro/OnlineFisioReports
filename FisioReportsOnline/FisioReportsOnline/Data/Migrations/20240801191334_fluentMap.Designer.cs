// <auto-generated />
using System;
using FisioReportsOnline.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FisioReportsOnline.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240801191334_fluentMap")]
    partial class fluentMap
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FisioReportsOnline.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEndereco"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEndereco");

                    b.HasIndex("IdPaciente")
                        .IsUnique();

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Avaliacao", b =>
                {
                    b.Property<int>("IdAvaliacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAvaliacao"));

                    b.Property<string>("DataAtendimento")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DataAtendimento");

                    b.Property<string>("DiagClinico")
                        .HasColumnType("TEXT")
                        .HasColumnName("DiagnosticoClinico");

                    b.Property<string>("DiagFisioterapeutico")
                        .HasColumnType("TEXT")
                        .HasColumnName("DiagnosticoFisioterapeutico");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("ObjetivoPessoal")
                        .HasColumnType("TEXT")
                        .HasColumnName("ObjetivoPessoal");

                    b.Property<string>("ObjetivoTerapeutico")
                        .HasColumnType("TEXT")
                        .HasColumnName("ObjetivoTerapeutico");

                    b.Property<string>("ObservacaoDoenca")
                        .HasColumnType("TEXT")
                        .HasColumnName("ObservacaoDoenca");

                    b.Property<string>("QueixaPrincipal")
                        .HasColumnType("TEXT")
                        .HasColumnName("QueixaPrincipal");

                    b.Property<string>("TratamentoAnterior")
                        .HasColumnType("TEXT")
                        .HasColumnName("TratamentoAnterior");

                    b.HasKey("IdAvaliacao");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Avaliacao", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Coluna", b =>
                {
                    b.Property<int>("IdExameFisico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdColuna")
                        .HasColumnType("int");

                    b.Property<byte>("IsEscoliose")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Escoliose");

                    b.Property<byte>("IsHipercifose")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Hipercifose");

                    b.Property<byte>("IsHiperlordose")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Hiperlordose");

                    b.Property<byte>("IsNormal")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Normal");

                    b.HasKey("IdExameFisico");

                    b.ToTable("Coluna", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Ombro", b =>
                {
                    b.Property<int>("IdOmbros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOmbros"));

                    b.Property<int>("IdExameFisico")
                        .HasColumnType("int");

                    b.Property<byte>("IsAnteriorizada")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Anteriorizada");

                    b.Property<byte>("IsEscapulaAlada")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("EscapulaAlada");

                    b.Property<byte>("IsNormal")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Normal");

                    b.Property<byte>("LadoElevado")
                        .HasColumnType("TINYINT")
                        .HasColumnName("LadoElevado")
                        .HasAnnotation("MySql:Comment", "0 - Elevado Direito e 1 - Elevado Esquerdo");

                    b.HasKey("IdOmbros");

                    b.HasIndex("IdExameFisico")
                        .IsUnique();

                    b.ToTable("Ombros", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Pelve", b =>
                {
                    b.Property<int>("IdPelve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPelve"));

                    b.Property<int>("IdExameFisico")
                        .HasColumnType("int");

                    b.Property<byte>("IsAnteversao")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Anteversao");

                    b.Property<byte>("IsEscoliose")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Escoliose");

                    b.Property<byte>("IsNormal")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Normal");

                    b.Property<byte>("IsRetroversao")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Retroversao");

                    b.Property<byte>("LadoElevado")
                        .HasColumnType("TINYINT")
                        .HasColumnName("LadoElevado")
                        .HasAnnotation("MySql:Comment", "0 - Elevado Direito e 1 - Elevado Esquerdo");

                    b.HasKey("IdPelve");

                    b.HasIndex("IdExameFisico")
                        .IsUnique();

                    b.ToTable("Pelve", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.DoencaCondicao", b =>
                {
                    b.Property<int>("IdDoencasCondicoes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoencasCondicoes"));

                    b.Property<byte>("Cardiaca")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Cardiaca");

                    b.Property<byte>("Cardiopatia")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Cardiopatia");

                    b.Property<byte>("Cirurgias")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Cirurgias");

                    b.Property<byte>("Covid")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Covid");

                    b.Property<byte>("Dermatologica")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Dermatologica");

                    b.Property<byte>("Diabete")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Diabete");

                    b.Property<byte>("DoencasHereditarias")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("DoencasHereditarias");

                    b.Property<byte>("Endocrina")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Endocrina");

                    b.Property<byte>("GastroIntestinal")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("GastroIntestinal");

                    b.Property<byte>("Gestacao")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Gestacao");

                    b.Property<byte>("Hipertensao")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Hipertensao");

                    b.Property<int>("IdAvaliacao")
                        .HasColumnType("int");

                    b.Property<byte>("Metabolica")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Metabolica");

                    b.Property<byte>("Neoplasias")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Neoplasias");

                    b.Property<byte>("Neurologicas")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Neurologicas");

                    b.Property<byte>("Respiratorias")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Respiratorias");

                    b.Property<byte>("Vasculares")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Vasculares");

                    b.Property<byte>("Visual")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Visual");

                    b.HasKey("IdDoencasCondicoes");

                    b.HasIndex("IdAvaliacao")
                        .IsUnique();

                    b.ToTable("DoencasCondicoes", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Evolucao", b =>
                {
                    b.Property<int>("IdEvolucao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvolucao"));

                    b.Property<string>("Anotacoes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Anotacoes");

                    b.Property<string>("Aparelho")
                        .HasColumnType("TEXT")
                        .HasColumnName("Aparelho");

                    b.Property<string>("ClienteChegou")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClienteChegou");

                    b.Property<string>("ClienteSaiu")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClienteSaiu");

                    b.Property<DateTime>("DataAtividade")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataAtividade");

                    b.Property<string>("Fisioterapeuta")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Fisioterapeuta");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdEvolucao");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("Evolucao", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ExameFisico", b =>
                {
                    b.Property<int>("IdExameFisico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExameFisico"));

                    b.Property<byte>("Cabeca")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Cabeca")
                        .HasAnnotation("MySql:Comment", "0 - Normal, 1 - Inclinada Esquerda e 2 - Inclinada Direita");

                    b.Property<byte>("Cervical")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Cervical")
                        .HasAnnotation("MySql:Comment", "0 - Normal, 1 - Anteriorizada e 2 - Retificada");

                    b.Property<byte>("Equilibrio")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Equilibrio");

                    b.Property<byte>("EstabilidadeEscapular")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("EstabilidadeEscapular");

                    b.Property<byte>("FroxidaoLigamentar")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("FroxidaoLigamentar");

                    b.Property<int>("IdAvaliacao")
                        .HasColumnType("int");

                    b.Property<byte>("Joelhos")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Joelhos")
                        .HasAnnotation("MySql:Comment", "0 - Normal, 1 - Valgo e 2 - Varo");

                    b.Property<byte>("MobilidadeColuna")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("MobilidadeColuna");

                    b.Property<byte>("PadraoMovimento")
                        .HasColumnType("TINYINT")
                        .HasColumnName("PadraoMovimento")
                        .HasAnnotation("MySql:Comment", "0 - Maleável e 1 - Rígido");

                    b.Property<byte>("Pes")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Pes")
                        .HasAnnotation("MySql:Comment", "0 - Normal, 1 - Valgo e 2 - Varo");

                    b.HasKey("IdExameFisico");

                    b.HasIndex("IdAvaliacao")
                        .IsUnique();

                    b.ToTable("ExameFisico", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.HabitoVida", b =>
                {
                    b.Property<int>("IdHabitosVida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHabitosVida"));

                    b.Property<byte>("AtivFisica")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("AtivFisica");

                    b.Property<byte>("Etilismo")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Etilismo");

                    b.Property<int>("IdAvaliacao")
                        .HasColumnType("int");

                    b.Property<byte>("IngereAgua")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("IngereAgua");

                    b.Property<byte>("Intestino")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Intestino");

                    b.Property<byte>("Medicacao")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Medicacao");

                    b.Property<string>("ObsHabitos")
                        .HasColumnType("TEXT")
                        .HasColumnName("ObsHabitos");

                    b.Property<byte>("Pilates")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Pilates");

                    b.Property<byte>("Tabagismo")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("Tabagismo");

                    b.HasKey("IdHabitosVida");

                    b.HasIndex("IdAvaliacao")
                        .IsUnique();

                    b.ToTable("HabitosVida", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataNascimento");

                    b.Property<DateTime>("DataUltimaAtividade")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataUltimaAtividade");

                    b.Property<DateTime>("DataUltimaAvaliacao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataUltimaAvaliacao");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Profissao")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Profissao");

                    b.Property<byte>("Sexo")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Sexo");

                    b.Property<string>("Telefone")
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("Telefone");

                    b.HasKey("IdPaciente");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Endereco", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Paciente", null)
                        .WithOne("Endereco")
                        .HasForeignKey("FisioReportsOnline.Models.Endereco", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Avaliacao", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Paciente", "Paciente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Coluna", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.ExameFisico", null)
                        .WithOne("Coluna")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Coluna", "IdExameFisico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Ombro", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.ExameFisico", null)
                        .WithOne("Ombros")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Ombro", "IdExameFisico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Pelve", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.ExameFisico", null)
                        .WithOne("Pelve")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.ComposicaoExameFisico.Pelve", "IdExameFisico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.DoencaCondicao", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Avaliacao", null)
                        .WithOne("DoencasCondicoes")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.DoencaCondicao", "IdAvaliacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Evolucao", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Paciente", "Paciente")
                        .WithMany("Evolucoes")
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ExameFisico", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Avaliacao", null)
                        .WithOne("ExameFisico")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.ExameFisico", "IdAvaliacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.HabitoVida", b =>
                {
                    b.HasOne("FisioReportsOnline.Models.Fisioterapico.Avaliacao", null)
                        .WithOne("HabitosVida")
                        .HasForeignKey("FisioReportsOnline.Models.Fisioterapico.HabitoVida", "IdAvaliacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FisioReportsOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FisioReportsOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FisioReportsOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FisioReportsOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Avaliacao", b =>
                {
                    b.Navigation("DoencasCondicoes")
                        .IsRequired();

                    b.Navigation("ExameFisico")
                        .IsRequired();

                    b.Navigation("HabitosVida")
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.ExameFisico", b =>
                {
                    b.Navigation("Coluna")
                        .IsRequired();

                    b.Navigation("Ombros")
                        .IsRequired();

                    b.Navigation("Pelve")
                        .IsRequired();
                });

            modelBuilder.Entity("FisioReportsOnline.Models.Fisioterapico.Paciente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Evolucoes");
                });
#pragma warning restore 612, 618
        }
    }
}
